import std::json
import std::sv::{ SV }

import @scene::{ Scene }
import @renderer::{ render }

// vroom vroom
@compiler c_flag "-O3 -ffast-math -ftree-vectorize -msse2 -mfpmath=sse -flto -march=native"
@compiler c_flag "-Xpreprocessor -fopenmp -lomp -Wno-extra-tokens"

def shift_args(argc: &i32, argv: &&str): str {
    if *argc == 0 {
        println(f"Expected argument but got none")
        std::exit(1)
    }
    let arg = (*argv)[0]
    (*argv) = (*argv) + 1
    (*argc) = (*argc) - 1
    return arg
}


def main(argc: i32, argv: &str) {
    let program = shift_args(&argc, &argv)
    if argc == 0 {
        println(f"Usage: {program} <scene file> [OPTIONS]")
        std::exit(1)
    }
    let scene_file = shift_args(&argc, &argv)
    if scene_file.starts_with("-") {
        println(f"Expected scene file but got option {scene_file}")
        std::exit(1)
    }
    let scene_json = json::parse_from_file(scene_file)

    let output_name = "output.qoi"
    // while argc > 0 {
    //     let option = shift_args(&argc, &argv)
    //     match option {
    //         "-o" | "--output" => output_name = shift_args(&argc, &argv),
    //         "-r" | "--resolution" => {
    //             let arg = SV::from_str(shift_args(&argc, &argv))
    //             let sx = arg.chop_u32()
    //             let sy = sx  // By default, we assume square images
    //             if not arg.is_empty() {
    //                 if arg.data[0] == 'x' {
    //                     println(f"Invalid resolution {argv[-1]}")
    //                     std::exit(1)
    //                 }
    //                 arg.chop_left()
    //                 sy = arg.chop_u32()
    //             }
    //         },
    //         else => {
    //             println(f"Unknown option {option}")
    //             std::exit(1)
    //         }
    //     }
    // }

    let scene = Scene::from_json(scene_json)
    let image = render(scene)
    image.save(output_name)
}