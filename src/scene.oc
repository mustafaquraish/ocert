import std::vector::{ Vector }
import std::vec::{ Vec2f }
import std::value::{ Value }

import @objects::object::{ Object }
import @camera::{ Camera }
import @color::{ Color }
import @hit::{ Hit }
import @ray::{ Ray }
import @utils::{ color_from_json }
import @texture::{ Texture }

struct Scene {
    objects: &Vector<&Object>

    // Note: Lights are also in the objects list, but we keep them
    // separate here for easier sampling
    lights: &Vector<&Object>

    camera: &Camera

    background: Color
    env_map: &Texture
    env_brightness: f32
}

def Scene::new(): &Scene {
    let scene = std::new<Scene>()
    scene.objects = Vector<&Object>::new()
    scene.lights = Vector<&Object>::new()
    return scene
}

def Scene::get_background(&this, ray: &Ray): Color {
    if .env_map? {
        let uv = Vec2f(
            (ray.direction.z.atan2(ray.direction.x) / (std::math::TAU) + 0.5),
            0.5 + ray.direction.y.asin() / std::math::PI
        )
        return .env_map.get(uv) * .env_brightness
    }
    return .background
}

def Scene::intersect(&this, ray: &Ray, hit: &Hit): bool {
    let hit_something = false
    for obj : .objects.iter() {
        if obj.intersect(ray, hit) then hit_something = true
    }
    return hit_something
}

def Scene::from_json(json: &Value): &Scene {
    let scene = Scene::new()
    for obj_json : json["objects"].as_list().iter() {
        let obj = Object::from_json(obj_json)
        scene.objects += obj
        if obj.mat.is_light() {
            scene.lights += obj
        }
    }

    scene.camera = Camera::from_json(json["camera"])
    if json.contains("background") {
        scene.background = color_from_json(json["background"])
    } else {
        scene.background = Color::black()
    }

    if json.contains("env_map") {
        scene.env_map = Texture::from_json(json["env_map"])
        if json.contains("env_brightness") {
            scene.env_brightness = json["env_brightness"].as_float() as f32
        } else {
            scene.env_brightness = 1.0
        }
    }
    return scene
}