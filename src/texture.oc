import std::value::{ Value }
import std::vec::{ Vec3f, Vec2f }
import std::image::{ Image }

import @color::{ Color }
import @hit::{ Hit }
import @ray::{ Ray }
import @utils::{ error, color_from_json, ensure, random_vec_in_hemisphere }

struct Texture {
    img: &Image
}

def Texture::new(img: &Image): &Texture {
    let tex = std::new<Texture>()
    tex.img = img
    return tex
}

def Texture::get(&this, t: Vec2f): Color {
    let u = t.x.clamp01() * (.img.width - 1) as f32
    let v = (1.0 - t.y.clamp01()) * (.img.height - 1) as f32
    return Color::from_img(.img.get_interpolated(u, v))
}

def Texture::sample_color(&this, hit: &Hit): Color => .get(hit.uv)

def Texture::from_json(json: &Value): &Texture {
    json.ensure(String)
    let filename = json.as_str().str()
    let img = Image::load(filename)
    return Texture::new(img)
}