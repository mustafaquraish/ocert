import std::vec::{ Vec3f }
import std::value::{ Value }

import @objects::object::{ Object }
import @ray::{ Ray }
import @hit::{ Hit }
import @matrix::{ Matrix }
import @utils::{ vec_from_json }

struct Transformed {
    object: &Object
    inv_transform: Matrix
    inv_transform_transpose: Matrix
}

def Transformed::new(base: &Object, transform: Matrix): &Object {
    let obj = Object::new(Transformed)
    obj.u.transformed.object = base
    let inv = transform.invert()
    obj.u.transformed.inv_transform = inv
    obj.u.transformed.inv_transform_transpose = inv.transpose()
    // println(`Creating transformed object: {obj.type}, t: {transform}\ninv: {obj.u.transformed.inv_transform}`)
    return obj
}

def Transformed::intersect(&this, ray: &Ray, hit: &Hit): bool {
    let transformed_ray = Ray(
        .inv_transform * ray.origin,
        .inv_transform % ray.direction
    )
    let res = .object.intersect(&transformed_ray, hit)
    if res {
        hit.normal = (.inv_transform_transpose * hit.normal).normalized()
    }
    return res
}
