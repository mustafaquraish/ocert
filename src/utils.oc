import std::vec::{ Vec3f }
import std::value::{ Value }
import std::random::{ randf32 }

import @color::{ Color }
import @ray::{ Ray }
import @matrix::{ Matrix }

[exits]
def error(json: &Value, msg: str) {
    println("---------------------------------------------------")
    println(`{json.span.start}:`)
    println(`   Error: {msg}`)
    println("---------------------------------------------------")
    std::exit(1)
}

def ensure(json: &Value, cond: bool, msg: str) {
    if cond then return
    error(json, msg)
}

def vec_from_json(json: &Value): Vec3f {
    ensure(json, json.is(List) and json.as_list().size == 3, "Expected a list of 3 numbers")
    return Vec3f(
        x: json[0].as_float() as f32,
        y: json[1].as_float() as f32,
        z: json[2].as_float() as f32,
    )
}

def color_from_json(json: &Value): Color {
    ensure(json, json.is(List) and json.as_list().size == 3, "Expected a list of 3 numbers")
    return Color(
        r: json[0].as_float() as f32,
        g: json[1].as_float() as f32,
        b: json[2].as_float() as f32,
    )
}

def random_vec_in_unit_sphere(ray: &Ray): Vec3f {
    let u = randf32(ray.rng) * 2.0 - 1.0
    let theta = randf32(ray.rng) * std::math::TAU
    let ra = (1.0 - u*u).sqrt()
    return Vec3f(
        ra * f32::cos(theta),
        ra * f32::sin(theta),
        u
    )
}

def random_vec_in_hemisphere(ray: &Ray, n: Vec3f): Vec3f {
    return (random_vec_in_unit_sphere(ray) + n).normalized()
}

def align_to(a: Vec3f, normal: Vec3f): Vec3f {
    return Matrix::rotation_matrix_for(normal) * a
}